from typing import Union

from fastapi import APIRouter, BackgroundTasks
import json
from datetime import datetime
from app.schemas.messages import WebhookMessage, WebhookStatus
from app.services.dialog_360 import (
    post_360_dialog_interative_message,
    post_360_dialog_text_message,
)
from app.services.build_timed_logger import build_timed_logger
from app.services.process_query import build_explanation, process_query
from settings import settings

router = APIRouter()

logger = build_timed_logger("webhook_logger", "whatsappbot_log")

def process_request(body: Union[WebhookMessage, WebhookStatus]):

    """Processes the webhook request."""

    # checks if the webhook is receiving a message:
    if isinstance(body, WebhookMessage):

        destinatary = body.messages[0]["from"]

        # checks if the message is not related to some interaction (e.g. generated by a button)
        # if so, it should be processed as a NSX query
        if "interactive" not in body.messages[0]:

            query = body.messages[0]["text"]["body"]

            try:
                message = process_query(query, destinatary)

                #For the web index, the response has a button for requesting for the sources:
                if settings.search_index == "web":
                    post_360_dialog_interative_message(destinatary, message, query)

                #For other indexes, only a standart Whatsapp message is produced:
                else:
                    post_360_dialog_text_message(destinatary, message)

            except Exception as e:
                message = "Erro no processamento da mensagem. Tente novamente."
                post_360_dialog_text_message(destinatary, message)
                raise e

            logger.info(
                json.dumps({
                    "timestamp": datetime.utcnow().isoformat(),
                    "user": destinatary,
                    "query": query,
                    "type": "NSX request at index " + settings.search_index,
                    "response": message
                })
            )

        else:

            button_title = body.messages[0]["interactive"]["button_reply"]["title"]

            if button_title == "ReferÃªncias":

                query = body.messages[0]["interactive"]["button_reply"]["id"]
                explanation = build_explanation(query, destinatary)

                post_360_dialog_text_message(destinatary, explanation)

                logger.info(
                    json.dumps({
                        "timestamp": datetime.utcnow().isoformat(),
                        "user": destinatary,
                        "type": "Query explanation request",
                        "response": explanation
                    })
                )


@router.post("/webhook")
async def waba_webhook(
    body: Union[WebhookMessage, WebhookStatus], background_tasks: BackgroundTasks
) -> dict:

    """Webhook for handling messages to the NSX Whatsapp Bot."""

    background_tasks.add_task(process_request, body)

    return {"message": "OK"}
