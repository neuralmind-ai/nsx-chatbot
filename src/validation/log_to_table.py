"""
Parse log files to csv files.

This script parses the log files generated by the validation pipeline and
converts them to csv files. The csv files are stored in the same directory
as the log files.

The aim of this script is to make it easier to analyze the logs.

Example:
    $ python log_to_table.py


"""

import json
from pathlib import Path

import pandas as pd


def parse_evaluation(log: dict):
    for log_entry in log["log"]:
        if log_entry["evaluation"] == "true":
            log_entry["evaluation"] = "correto"
        elif log_entry["evaluation"] == "false":
            log_entry["evaluation"] = "incorreto"
        elif log_entry["evaluation"] == "not evaluated":
            log_entry["evaluation"] = "nÃ£o avaliado"
        # Format latency to 2 decimal places
        if log_entry.get("latency"):
            log_entry["latency"] = round(log_entry["latency"], 2)


def to_table(log_path: Path) -> Path:
    """Convert log file to csv table."""
    with log_path.open("r", encoding="utf-8") as f:
        log = json.load(f)
    parse_evaluation(log)
    dataframe = pd.DataFrame(log["log"])
    table_path = log_path.parent / f"{log_path.stem}.csv"
    dataframe.to_csv(table_path, index=False, encoding="utf-8")
    return table_path


if __name__ == "__main__":
    logs = Path("logs/")

    for directory in logs.iterdir():
        print(directory.name)
        for log_path in directory.iterdir():
            if log_path.suffix == ".json":
                print(log_path.name)
                with log_path.open("r", encoding="utf-8") as f:
                    log = json.load(f)

                parse_evaluation(log)

                dataframe = pd.DataFrame(log["log"])
                dataframe.to_csv(
                    directory / f"{log_path.stem}.csv", index=False, encoding="utf-8"
                )
